# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  JOBS: 16
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  # BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    name: ${{ matrix.generator }} ${{ matrix.compiler }} ${{ matrix.build_type }}
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        compiler: [g++, clang++]
        generator: [Ninja]
        build_type: [Debug, Release]
        include:
          - build_type: Debug
            enable_werror: ON
          - build_type: Release
            enable_werror: OFF
    
    steps:
    - name: Set up Clang
      uses: egor-tensin/setup-clang@v1
      with:
        version: latest
        platform: x64
    - name: Checkout repo and submodules
      uses: actions/checkout@v3
      with:
        submodules: recursive

    - name: Install Ninja
      if: ${{ matrix.generator == 'Ninja' }}
      run: sudo apt install ninja-build

    - name: Install GTests
      run: sudo apt-get install libgtest-dev
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake -B ${{github.workspace}}/build \
          -G="${{matrix.generator}}" \
          -DCMAKE_CXX_COMPILER=${{matrix.compiler}} \
          -DCMAKE_BUILD_TYPE=${{matrix.build_type}} \
          -DENABLE_WERROR=${{matrix.enable_werror}} \
          -DSKIP_CLANG_FORMAT=ON \
          -DBUILD_TESTS=ON
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}} -j

    - name: Unit tests
      working-directory: ${{github.workspace}}/build      # Execute tests defined by the CMake configuration.
    # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{matrix.build_type}} -VV -j ${{env.JOBS}} -L unit
