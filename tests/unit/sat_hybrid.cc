import sat_hybrid;

#include <gtest/gtest.h>

#include <random>

TEST(Naive, ExampleTask) {
    constexpr int ClauseNum = 2;
    constexpr int VarsNum = 3;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {
        {{1, -2, -3}, {2, 3, -1}}};
    //
    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_TRUE(res.has_value());
}

TEST(Naive, False) {
    constexpr int ClauseNum = 2;
    constexpr int VarsNum = 3;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {
        {{2, 2, 2}, {-2, -2, -2}}};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_FALSE(res.has_value());
}

TEST(HybridGen, TrueExample5_2) {
    constexpr int ClauseNum = 5;
    constexpr int VarsNum = 2;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {-1, -2, 2},
        {-1, 1, -1},
        {2, 2, 1},
        {-2, 1, -1},
        {-2, 2, -1},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_TRUE(res.has_value());
}

TEST(HybridGen, FalseExample5_2) {
    constexpr int ClauseNum = 5;
    constexpr int VarsNum = 2;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {-2, 1, 1},
        {-1, -2, -1},
        {1, 2, 2},
        {-1, 2, -1},
        {1, 2, 1},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_FALSE(res.has_value());
}

TEST(HybridGen, TrueExample10) {
    constexpr int ClauseNum = 10;
    constexpr int VarsNum = 4;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {4, 2, 2},
        {-1, -4, 4},
        {-1, 4, -3},
        {1, -2, 3},
        {-3, 2, -1},
        {3, -3, 1},
        {-2, 3, -2},
        {-2, -1, -3},
        {-3, 4, 2},
        {4, 4, -2},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_TRUE(res.has_value());
}

TEST(HybridGen, FalseExample10) {
    constexpr int ClauseNum = 10;
    constexpr int VarsNum = 3;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {1, -3, -3},
        {-3, -1, -3},
        {2, -2, -1},
        {3, 1, 3},
        {-3, 1, 3},
        {-1, 2, -1},
        {-2, -2, 3},
        {1, 3, 1},
        {1, 2, 3},
        {-1, 1, -3},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_FALSE(res.has_value());
}

TEST(HybridGen, TrueExample15) {
    constexpr int ClauseNum = 15;
    constexpr int VarsNum = 4;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {4, 2, 3},
        {1, -1, 3},
        {4, 3, -4},
        {1, -3, -3},
        {2, -3, 4},
        {-4, 1, -2},
        {2, -3, 4},
        {4, 2, 4},
        {2, -4, -2},
        {3, -3, -2},
        {4, -4, 1},
        {-4, -1, 2},
        {3, -2, -3},
        {1, 4, 4},
        {2, -2, 1},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_TRUE(res.has_value());
}

TEST(HybridGen, FalseExample15) {
    constexpr int ClauseNum = 15;
    constexpr int VarsNum = 4;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {-3, -2, -3},
        {-4, 4, -1},
        {-4, 1, 3},
        {-4, -1, 3},
        {1, -3, -3},
        {4, -4, 4},
        {-2, -4, -3},
        {3, 3, -2},
        {4, -1, -1},
        {3, 4, 2},
        {-2, -4, -1},
        {-3, 4, 3},
        {2, -1, -1},
        {-1, 3, 3},
        {-3, -1, -4},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_FALSE(res.has_value());
}

TEST(HybridGen, TrueExample20) {
    constexpr int ClauseNum = 20;
    constexpr int VarsNum = 5;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {3, 4, -4},   {-4, -2, 3}, {4, -2, 3},  {2, -2, -2}, {2, -5, -3},
        {-5, -1, 5},  {-3, 3, -5}, {1, 2, 4},   {-5, 2, 1},  {-4, -1, 4},
        {-4, -1, -2}, {1, 3, 2},   {-2, -1, 5}, {-3, 3, -5}, {-3, 3, 3},
        {-3, 5, 4},   {-1, -4, 4}, {-2, -3, 5}, {-1, -5, 5}, {-1, -1, 4},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_TRUE(res.has_value());
}

TEST(HybridGen, FalseExample20) {
    constexpr int ClauseNum = 20;
    constexpr int VarsNum = 5;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {2, -2, 1},   {-5, 3, 1},   {2, 4, 5},    {-1, 1, -4}, {-4, -4, -4},
        {3, 3, -1},   {-1, -5, -5}, {4, 5, -1},   {-3, 5, 4},  {1, -2, -5},
        {-3, -3, -5}, {-1, 1, 5},   {-4, -2, -5}, {3, 4, -2},  {-5, 1, 2},
        {-5, 2, 1},   {2, -5, -4},  {-1, 3, 1},   {-2, 1, -2}, {-5, 5, -5},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_FALSE(res.has_value());
}

TEST(HybridGen, TrueExample20_10) {
    constexpr int ClauseNum = 20;
    constexpr int VarsNum = 10;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {5, -5, -6}, {4, -2, -8},  {8, -3, -7},  {-5, 2, 3},  {-2, 5, -7},
        {8, 5, -7},  {-2, -1, 2},  {-7, -5, -3}, {3, 9, -10}, {8, -10, 9},
        {-3, 7, 7},  {-9, -9, -1}, {8, -8, 9},   {-4, 6, -7}, {-6, 5, -8},
        {-6, -9, 3}, {9, 1, 6},    {-5, 10, -6}, {-8, 1, 8},  {-6, 8, 5},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_TRUE(res.has_value());
}

TEST(HybridGen, TrueExample25) {
    constexpr int ClauseNum = 25;
    constexpr int VarsNum = 5;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {2, -4, 1},  {-2, 3, -2}, {-2, -3, 1}, {-2, -4, -1}, {-2, 3, -1},
        {1, 2, -5},  {1, 4, -5},  {-4, 4, 1},  {3, -2, 1},   {-1, -3, 3},
        {-2, -2, 2}, {-3, -3, 1}, {5, -4, -1}, {5, -5, -1},  {-4, -1, 4},
        {-2, 4, 4},  {2, 5, 5},   {4, -2, -2}, {-3, 3, 5},   {-3, -2, 2},
        {-4, 3, -4}, {3, -4, -4}, {-5, -4, 5}, {3, -3, -2},  {-5, -2, 2},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_TRUE(res.has_value());
}

TEST(HybridGen, FalseExample25) {
    constexpr int ClauseNum = 25;
    constexpr int VarsNum = 5;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {-2, -2, 5},  {-5, 5, 3},   {2, 2, -1}, {-2, 5, -1},  {1, 4, 4},
        {3, -2, -2},  {-4, 4, 5},   {4, 5, 5},  {1, -1, -2},  {-2, -1, -1},
        {-4, 4, -2},  {5, 2, -4},   {5, 1, 3},  {-3, -3, -4}, {-2, 4, 1},
        {-3, -4, -5}, {-3, -2, -5}, {-2, 5, 5}, {-1, -1, 5},  {3, -1, -2},
        {-3, 3, -3},  {-3, -5, 5},  {1, -2, 1}, {-5, -5, 3},  {-3, -4, -5},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_FALSE(res.has_value());
}

TEST(HybridGen, TrueExample30) {
    constexpr int ClauseNum = 30;
    constexpr int VarsNum = 5;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {-5, -3, -3}, {-3, -1, -4}, {-1, -2, -4}, {-3, 2, 5},  {-3, -3, -4},
        {-3, -1, -4}, {-5, 5, -2},  {4, 2, 2},    {3, -4, 4},  {2, -3, -3},
        {4, -3, -5},  {3, -1, 1},   {2, -1, -1},  {-5, 3, -5}, {1, -3, -1},
        {1, 1, -5},   {5, -1, -4},  {1, 2, -3},   {-1, 4, 4},  {3, -2, 4},
        {-4, -3, -4}, {3, -3, -4},  {-5, 4, -4},  {-5, 1, -3}, {3, -1, -3},
        {-3, 2, 5},   {-1, 3, -2},  {4, -1, -5},  {4, 2, 2},   {3, -1, -4},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_TRUE(res.has_value());
}

TEST(HybridGen, FalseExample30) {
    constexpr int ClauseNum = 30;
    constexpr int VarsNum = 5;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {-1, -4, 4}, {-2, 5, 5},   {3, -1, 5},   {1, -5, -4},  {1, 1, -5},
        {1, -1, 2},  {1, 2, -2},   {-3, 2, -1},  {-1, 4, -3},  {3, 2, 1},
        {3, -5, 5},  {-5, -2, 3},  {-4, -4, -5}, {-5, -3, 4},  {3, 2, -2},
        {2, -2, 5},  {3, -2, 2},   {-2, 2, 5},   {-2, -4, -2}, {-5, 4, 4},
        {5, 2, -5},  {-2, -1, -1}, {-2, -1, -3}, {1, -4, 2},   {-5, 4, -3},
        {5, 5, -4},  {4, -4, 2},   {2, 5, -3},   {1, -2, 2},   {-1, 2, 4},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_FALSE(res.has_value());
}

TEST(HybridGen, TrueExample33_11) {
    constexpr int ClauseNum = 33;
    constexpr int VarsNum = 11;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {8, 9, 10},    {-8, -9, 2},   {5, 7, 5},    {-5, 11, 1}, {-11, -1, -9},
        {10, -11, 7},  {1, -1, -11},  {-7, -8, -6}, {9, 7, 3},   {-4, -4, -1},
        {2, 6, 2},     {-1, -10, -3}, {-4, 11, -6}, {-5, 6, -3}, {7, 1, 4},
        {-2, 11, -11}, {10, -7, 9},   {4, -10, -2}, {7, 2, 4},   {6, 8, -10},
        {6, 9, 9},     {-3, -2, -5},  {8, -1, 2},   {9, -6, 8},  {-11, 4, 4},
        {-1, 7, 5},    {-4, 2, 10},   {-10, 2, -8}, {3, -8, 10}, {9, -2, 1},
        {4, -8, -10},  {3, 10, 8},    {-9, -7, -4},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_TRUE(res.has_value());
}

TEST(HybridGen, TrueExample50) {
    constexpr int ClauseNum = 50;
    constexpr int VarsNum = 10;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {9, 6, 1},    {3, -9, 7},     {-6, -1, 5},  {-6, -5, 3}, {10, -2, -10},
        {5, -3, 7},   {6, -8, 6},     {2, -7, -1},  {2, 7, 6},   {-7, -1, -7},
        {5, 6, -4},   {-3, -2, 7},    {2, 3, 2},    {-6, 4, 5},  {-8, -2, -6},
        {-3, 9, 1},   {-10, -8, -2},  {-8, -4, -6}, {-5, 7, -9}, {-6, 3, -2},
        {7, 6, -10},  {10, 7, -2},    {2, 10, 3},   {9, 9, -4},  {5, -4, -10},
        {-8, 8, 10},  {-10, 3, 2},    {8, 2, 2},    {-1, 5, -3}, {6, -6, 4},
        {10, 4, 8},   {-8, -4, 7},    {-5, -8, -5}, {10, 4, 10}, {-1, -10, 5},
        {-9, -3, 2},  {-10, -3, -10}, {3, 6, -8},   {10, 6, 2},  {-7, 10, -1},
        {-3, 5, -6},  {-5, 7, -2},    {-6, 10, 2},  {5, -6, 2},  {2, -8, 3},
        {-8, -7, -2}, {10, 3, 7},     {-3, 1, -8},  {10, 8, 8},  {-8, -5, 2},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_TRUE(res.has_value());
}

TEST(HybridGen, FalseExample50) {
    constexpr int ClauseNum = 50;
    constexpr int VarsNum = 10;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {-6, 5, -7},  {-7, -8, -2}, {9, -2, 6},    {10, 1, 5},  {5, 1, -5},
        {4, 8, 7},    {2, -5, 1},   {-8, -4, -3},  {3, -5, -7}, {-3, 1, 2},
        {-7, 5, -2},  {5, -5, -2},  {-9, -10, 10}, {6, 8, -8},  {8, 2, 10},
        {-1, -6, 7},  {-2, -9, -2}, {-9, -8, 1},   {1, 8, -9},  {-1, -10, 10},
        {6, -6, 3},   {-2, -8, 2},  {-1, -7, 8},   {-3, -5, 6}, {-3, 7, -6},
        {-2, 7, -9},  {6, -10, -8}, {-9, -4, -10}, {6, -1, 6},  {-4, 1, 8},
        {-3, -10, 5}, {-1, -8, 9},  {-10, 3, -10}, {-6, 8, -8}, {-4, -5, 6},
        {6, 10, 9},   {-6, -5, 3},  {7, 8, -8},    {-4, 1, -6}, {8, 6, 2},
        {-2, -9, -8}, {9, 8, -5},   {2, 8, 9},     {8, -5, 8},  {-4, -9, -3},
        {10, 4, 6},   {-5, -3, 4},  {-8, 9, -2},   {1, -9, -1}, {7, 3, -3},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_FALSE(res.has_value());
}

TEST(HybridGen, TrueExample70) {
    constexpr int ClauseNum = 70;
    constexpr int VarsNum = 11;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {-9, -8, -7}, {-11, 3, 2},  {-3, -5, 6},  {3, 2, -7},    {5, 8, -6},
        {10, 6, -8},  {-6, -9, -2}, {-11, 1, -8}, {2, -6, -2},   {-5, -2, 6},
        {10, -4, -3}, {-7, 7, -2},  {-7, 1, 10},  {6, -3, -5},   {3, -8, -10},
        {4, -3, 4},   {-5, -6, 6},  {9, -8, -2},  {-7, -3, 11},  {-6, 9, 1},
        {2, -9, 11},  {-1, -7, 5},  {-1, 7, -6},  {-1, -5, 1},   {-2, 10, -7},
        {-2, -2, 3},  {2, -2, 1},   {-5, 10, 2},  {-11, -3, 5},  {4, -5, 2},
        {8, -6, 1},   {5, 8, 1},    {-6, 8, -10}, {-2, 2, 8},    {-11, -8, 7},
        {2, -7, 3},   {-1, 8, -4},  {8, 8, -5},   {-6, 6, -10},  {10, -10, 9},
        {3, 5, -11},  {10, -2, 11}, {-3, 8, -1},  {3, -3, -1},   {11, -7, -9},
        {6, -10, 9},  {9, 9, -1},   {-8, 3, 5},   {6, -11, 4},   {-4, -5, 6},
        {-6, -7, -5}, {-7, -3, -5}, {-1, 4, 6},   {3, -1, -9},   {7, -9, -7},
        {11, -7, -6}, {10, 10, 7},  {-9, 4, -1},  {-11, -6, -1}, {-10, -3, 9},
        {-9, 10, 8},  {6, -9, -11}, {4, -3, -4},  {2, -8, -2},   {-4, 1, -7},
        {9, 7, -5},   {-11, -6, 7}, {9, 11, -11}, {7, -5, -10},  {-5, -10, -2},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_TRUE(res.has_value());
}

TEST(HybridGen, FalseExample70) {
    constexpr int ClauseNum = 70;
    constexpr int VarsNum = 10;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {-7, -4, -4}, {-2, 7, -7},   {7, -8, -10}, {-3, 1, 10},  {10, -8, 9},
        {5, 10, 5},   {-1, 7, -9},   {-9, 4, -2},  {-5, 5, 6},   {7, -2, -6},
        {-2, 6, 5},   {1, 5, 5},     {10, -4, 8},  {6, -4, -7},  {-3, 3, 5},
        {5, 10, 4},   {3, -5, -4},   {-7, 3, -10}, {7, 8, -5},   {-3, -2, 1},
        {6, 10, -8},  {5, -2, -7},   {4, -7, -9},  {-2, -6, 3},  {2, 5, -6},
        {-2, 5, -9},  {-3, 9, -10},  {1, 2, 1},    {-5, 6, 1},   {8, 4, -1},
        {7, 6, -7},   {-4, 9, 2},    {-10, -1, 5}, {9, -1, -1},  {9, -7, 1},
        {7, -9, -6},  {-9, -6, 2},   {-8, 2, -7},  {6, -10, -6}, {6, -1, 8},
        {-4, -7, 1},  {-10, -8, -1}, {-5, 2, 7},   {-9, 9, 3},   {10, 4, -3},
        {7, 3, 6},    {-7, -7, 10},  {2, -4, -7},  {8, 8, -5},   {-10, 7, -3},
        {-9, -6, -5}, {-6, -9, -6},  {6, 8, 9},    {-4, 6, -6},  {8, -7, 4},
        {-5, 7, -1},  {3, 3, -4},    {-8, 3, -10}, {9, 9, -4},   {3, -10, 10},
        {2, -6, 7},   {-9, -3, -2},  {7, 10, 9},   {-5, -9, 2},  {10, 4, -2},
        {-5, -9, 10}, {5, -2, -8},   {-3, 10, 5},  {4, 8, -7},   {-8, 1, -10},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_FALSE(res.has_value());
}

TEST(HybridGen, TrueExample100) {
    constexpr int ClauseNum = 100;
    constexpr int VarsNum = 20;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {16, -8, -17},  {-3, 13, 14},   {5, -5, -8},    {-16, -8, 6},
        {-15, -1, 5},   {16, -1, 8},    {-11, 14, -14}, {-7, -18, 11},
        {-15, -11, 4},  {-1, 12, -3},   {-1, 19, 12},   {-8, -4, -18},
        {-10, -4, -12}, {-6, -17, 15},  {-19, 14, 15},  {2, -12, -5},
        {-11, 11, -20}, {8, -7, 7},     {-2, -6, -4},   {-3, -4, 6},
        {5, -16, -7},   {-13, 1, 3},    {-16, -7, 3},   {15, -17, -2},
        {4, 3, 18},     {-16, -6, 12},  {-18, -14, 18}, {-6, 20, 18},
        {-15, -1, -18}, {16, 1, -7},    {-7, -5, -6},   {-13, -16, -1},
        {7, -1, 14},    {-10, 2, 7},    {-6, 17, -8},   {-19, 11, -19},
        {-2, 18, -15},  {-17, -14, 7},  {19, 13, 19},   {-10, -20, -16},
        {-13, -10, 15}, {1, -4, -1},    {2, -6, -10},   {-1, 6, -14},
        {8, -4, 7},     {15, -4, 2},    {19, 20, 3},    {-10, 17, 14},
        {-2, 16, -15},  {-19, -6, 12},  {-19, 9, -2},   {-5, -2, 6},
        {-2, -17, -9},  {-16, 12, -4},  {-7, -12, 13},  {-16, 8, -14},
        {12, 20, 9},    {9, 2, 2},      {-5, -19, -20}, {-7, 2, -20},
        {3, -12, -8},   {-4, 7, -14},   {-9, -2, 18},   {1, -4, 12},
        {12, 7, -16},   {20, 18, 14},   {-3, -19, -9},  {-19, 9, -18},
        {-13, -8, 10},  {-9, 15, 20},   {15, 16, 13},   {-20, -3, -10},
        {8, 18, 3},     {-19, 19, 10},  {-1, -5, 20},   {3, 14, 3},
        {18, 9, -7},    {20, -12, 6},   {2, -17, -3},   {-13, 5, 18},
        {-13, -10, 4},  {-6, 12, 2},    {11, 16, -3},   {-5, -12, 7},
        {20, -14, -3},  {-17, 10, 1},   {20, -7, -5},   {2, -8, 4},
        {-3, 18, 6},    {6, -10, 19},   {13, 8, 4},     {2, 20, -17},
        {10, 19, -7},   {-16, 7, 14},   {9, 18, 11},    {3, -5, 13},
        {9, -6, 6},     {-13, 15, -20}, {13, -12, -5},  {-9, 4, -12},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_TRUE(res.has_value());
}

TEST(HybridGen, FalseExample100) {
    constexpr int ClauseNum = 100;
    constexpr int VarsNum = 20;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {-8, -16, 9},   {-11, -20, 16}, {13, -18, 3},   {6, -11, 2},
        {-10, 4, -11},  {-15, -9, 8},   {17, 15, -13},  {15, 9, -8},
        {5, -20, 20},   {-18, 2, -8},   {-18, 14, -18}, {-10, -4, 9},
        {-12, -18, -7}, {20, -7, 18},   {-8, -5, 9},    {-1, -19, -4},
        {20, -8, -1},   {13, -4, 18},   {7, 19, 18},    {-2, -10, -4},
        {-5, -6, -6},   {-1, 6, 2},     {16, -13, 20},  {-18, 16, 20},
        {-16, -2, 18},  {-9, -15, -2},  {12, -11, 15},  {-14, -8, -18},
        {-1, -14, -8},  {6, 16, 14},    {11, -19, 7},   {-6, -17, -4},
        {-13, -16, 18}, {2, -6, 12},    {5, -11, -2},   {-18, 6, 20},
        {-15, -20, -6}, {-17, -3, 13},  {-18, -9, -1},  {-10, 17, -10},
        {19, -18, -4},  {18, -12, 16},  {17, -19, -13}, {18, 6, 14},
        {18, 15, 3},    {12, -5, -7},   {-8, 2, 10},    {-19, -7, -2},
        {11, 4, 11},    {-14, -12, 13}, {-17, 5, 14},   {4, 6, 10},
        {-9, 4, 3},     {-5, 6, 17},    {5, 18, -7},    {-10, 15, -17},
        {5, 14, 17},    {1, -14, -2},   {16, -11, 1},   {-8, 6, 14},
        {9, -2, 17},    {10, 11, -11},  {-10, 11, -4},  {-14, 17, -10},
        {-18, 20, 5},   {-3, 19, 11},   {12, 3, 15},    {-7, 1, -7},
        {11, -17, -6},  {13, -17, 11},  {-3, 11, 16},   {17, -18, 13},
        {11, 7, -4},    {-7, 11, 1},    {-18, 13, -13}, {-12, 10, 14},
        {-9, -19, -20}, {-15, 13, 12},  {-4, 20, -5},   {14, -5, 19},
        {-1, 4, -16},   {-12, 14, 13},  {-1, 2, 10},    {15, -7, -19},
        {-20, 9, 6},    {15, 8, 3},     {14, 12, -5},   {-8, 13, -8},
        {6, -13, 6},    {3, 6, 18},     {5, -13, 6},    {3, 11, 7},
        {14, 11, 6},    {17, 1, -14},   {-10, -1, -5},  {2, -20, -11},
        {-9, 17, 20},   {7, 12, -1},    {10, -11, 4},   {-1, 17, -14},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_FALSE(res.has_value());
}

TEST(HybridGen, TrueExample110) {
    constexpr int ClauseNum = 110;
    constexpr int VarsNum = 24;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {22, 24, 16},    {-11, 6, -24},  {-15, -13, -6}, {5, 15, -9},
        {22, -14, 13},   {-21, 2, 16},   {-20, -3, -11}, {-16, 20, 15},
        {-18, 18, 20},   {8, -22, 24},   {20, -17, -18}, {24, 3, 23},
        {-24, 16, 13},   {24, -21, -5},  {-14, 17, -9},  {4, 4, -15},
        {-22, -6, -8},   {23, -6, 11},   {-6, -21, -1},  {-19, -12, -22},
        {-3, -6, -7},    {-17, -9, 18},  {-17, -7, -5},  {14, 13, 18},
        {-15, 10, -13},  {20, -18, 9},   {12, 10, 2},    {-2, -24, 17},
        {7, -23, 6},     {21, 17, -14},  {1, -14, -2},   {12, 18, 8},
        {24, 12, -10},   {4, -18, -10},  {16, -6, 20},   {9, 3, -16},
        {11, 22, 17},    {2, 23, -4},    {16, -3, -17},  {2, -15, -20},
        {19, 4, -20},    {-19, -19, -9}, {19, 18, 5},    {-9, 5, 19},
        {4, 17, 1},      {-19, -5, 1},   {-2, -15, -20}, {8, -18, -23},
        {17, -16, 8},    {-5, -4, -13},  {-3, -1, -14},  {17, 5, -22},
        {7, -17, 13},    {7, 16, 18},    {20, 5, -11},   {-22, -10, -11},
        {21, -5, -24},   {23, -19, -14}, {-23, -18, 8},  {-8, -18, 16},
        {13, -16, -14},  {-19, -15, -9}, {21, 5, 20},    {16, -15, 18},
        {13, 3, 5},      {-15, -21, 21}, {-1, 17, -11},  {10, 7, -11},
        {-21, -11, -11}, {-22, -21, 7},  {2, 11, -12},   {-12, -16, -14},
        {-16, -23, 22},  {-6, -7, 5},    {-20, -24, 7},  {4, -20, -12},
        {21, 21, -11},   {20, -14, -6},  {-7, 9, 13},    {10, -12, -11},
        {-12, 5, -24},   {-7, 10, -8},   {-5, 7, 14},    {18, -13, -2},
        {7, -5, -21},    {24, 4, -16},   {-22, 20, -17}, {-21, 9, -6},
        {-5, 12, 5},     {-17, -8, -16}, {2, 7, 7},      {-23, -20, 2},
        {24, -14, 8},    {24, -17, -7},  {-4, -21, -3},  {-11, 13, 20},
        {15, -1, 7},     {16, -8, -15},  {-8, 23, -1},   {-21, 24, 18},
        {-1, 10, -1},    {2, 11, 8},     {4, -21, -17},  {8, -16, 20},
        {-8, 4, 11},     {14, -17, -6},  {-3, 24, -20},  {6, 13, 20},
        {-10, 1, 12},    {-17, 11, 24},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();
    EXPECT_TRUE(res.has_value());
}

TEST(HybridGen, FalseExample110) {
    constexpr int ClauseNum = 110;
    constexpr int VarsNum = 24;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {-6, -23, -4},   {-20, -7, 23},   {-3, -16, -9},  {-15, -7, -18},
        {17, -11, -14},  {-15, -3, -5},   {17, 16, 12},   {-11, 2, 8},
        {-6, -23, -21},  {12, -11, 2},    {15, 6, -20},   {-23, -9, -15},
        {17, -13, 19},   {-13, 16, -3},   {-10, 11, 7},   {22, -24, -23},
        {-19, 21, 4},    {20, -14, -5},   {-13, 15, 24},  {24, 10, -3},
        {-1, 1, 22},     {10, 24, -16},   {-14, 15, -7},  {-6, -15, -19},
        {-6, 8, -24},    {-24, 4, 13},    {7, -1, 9},     {-14, -15, -4},
        {20, 18, 12},    {9, 18, -12},    {-8, 10, -21},  {3, 23, -8},
        {-14, 14, -4},   {1, -10, 21},    {12, 19, 9},    {8, -14, -13},
        {1, 10, 21},     {-14, -18, -21}, {-2, -23, -21}, {1, 14, 21},
        {-4, 17, 6},     {6, -9, 11},     {15, 2, -12},   {7, 8, 19},
        {17, 7, -21},    {-20, -21, 13},  {-12, 9, 23},   {-20, 11, -18},
        {-6, -5, -6},    {11, -4, -2},    {10, 1, -5},    {-20, -1, -13},
        {-14, 1, 3},     {7, 21, -6},     {-20, -1, 3},   {19, 16, -20},
        {8, 24, 18},     {7, -7, 16},     {20, 11, -17},  {-20, 20, 16},
        {17, -2, -7},    {22, 22, -21},   {-3, 9, -19},   {18, -22, 18},
        {23, -5, -16},   {17, -24, -22},  {2, -18, -20},  {22, 19, -12},
        {-18, -13, -14}, {-13, 18, 1},    {-1, 10, 3},    {-5, 4, -16},
        {11, -4, 14},    {9, 1, -2},      {-5, 18, 24},   {11, 10, 1},
        {-10, 24, -18},  {-17, 5, -20},   {6, 23, -10},   {5, 6, 10},
        {-1, 9, 3},      {-15, 10, 20},   {-20, -16, 14}, {3, 18, 18},
        {22, -9, 20},    {-23, -11, 22},  {-4, -15, 8},   {15, 9, -1},
        {9, 21, 11},     {2, -24, 17},    {13, 13, 19},   {-14, 13, -1},
        {9, -7, -21},    {-13, -1, 4},    {13, -13, 24},  {-2, -23, -18},
        {11, -1, 11},    {-3, 4, -5},     {-15, -10, 21}, {-15, 7, 10},
        {12, 18, -24},   {8, -11, -6},    {-9, 13, -6},   {-15, 23, -7},
        {-11, 6, 23},    {-11, -15, 24},  {-16, -6, 16},  {8, 22, -24},
        {-10, 3, -5},    {-15, -24, -12},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();
    EXPECT_FALSE(res.has_value());
}

TEST(HybridGen, TrueExample125) {
    constexpr int ClauseNum = 125;
    constexpr int VarsNum = 25;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {-17, 4, -8},    {-8, -18, -23},  {11, -25, -25}, {-21, -24, -13},
        {17, 2, -6},     {-4, 4, 17},     {-5, -1, -9},   {18, 8, 2},
        {-15, 16, -9},   {-18, 21, 2},    {11, -15, -16}, {-12, 3, 12},
        {-14, 7, -21},   {14, -20, 18},   {16, 22, 18},   {4, -13, -4},
        {22, -17, -7},   {7, 2, 12},      {-5, -7, 17},   {6, 1, 1},
        {-1, -2, -9},    {21, -20, 21},   {18, 25, 16},   {-1, -6, -13},
        {-1, -8, -2},    {8, 24, 15},     {19, 10, -21},  {-19, -7, 10},
        {16, -12, -18},  {3, 11, -25},    {13, 12, -6},   {4, -5, 5},
        {6, 9, -11},     {20, -1, 19},    {22, 18, -6},   {16, -5, -8},
        {-18, -21, -21}, {-3, 8, -8},     {-17, 19, 14},  {4, -20, 12},
        {19, 14, -2},    {2, -3, 18},     {11, 22, -10},  {1, -9, 16},
        {16, -11, -4},   {-19, 19, -13},  {-3, -15, 20},  {9, 4, -25},
        {24, 11, -22},   {8, 17, -17},    {-10, 22, 6},   {1, -1, -8},
        {-8, 17, 20},    {6, 13, 3},      {-15, 7, -3},   {-18, -10, 20},
        {-22, -1, 13},   {-14, -5, -1},   {20, -16, -20}, {15, 1, -19},
        {19, 8, -20},    {-6, -2, -3},    {-19, 9, -20},  {-2, 10, 14},
        {-14, 12, 8},    {16, 8, 16},     {-5, -17, 14},  {-24, -9, 5},
        {-4, 18, 15},    {21, -23, 21},   {24, -17, 22},  {13, -12, 16},
        {21, -4, -12},   {6, 16, -2},     {-8, 5, -22},   {-17, 17, 8},
        {12, 15, 3},     {-1, -21, 1},    {-24, 8, 6},    {9, -24, -24},
        {11, 15, -9},    {15, 7, 14},     {-3, -24, -15}, {-12, 8, 13},
        {22, 25, -11},   {21, 13, 23},    {17, -10, -9},  {-10, -9, -20},
        {10, 1, -7},     {-5, 23, -11},   {21, 12, -14},  {15, 16, 16},
        {5, -23, -10},   {16, 20, 20},    {9, 7, 25},     {-19, -20, -23},
        {4, 17, -21},    {-17, -13, 10},  {3, -3, 21},    {5, 21, 5},
        {-13, -6, 13},   {15, -8, -14},   {-1, -1, 22},   {-6, 17, 25},
        {-10, -25, 11},  {-7, -1, -24},   {-8, 22, 5},    {22, 23, 9},
        {15, -5, 9},     {-11, -15, -14}, {21, 23, 23},   {-3, 1, -10},
        {-3, -10, -11},  {15, 18, 9},     {-14, -24, 1},  {21, 16, -4},
        {7, -11, -21},   {-22, 22, 16},   {-22, 7, -5},   {-1, -25, 19},
        {-7, -23, 12},   {16, 15, -22},   {-23, 16, -1},  {21, 20, 3},
        {-7, 17, -14},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();
    EXPECT_TRUE(res.has_value());
}

TEST(HybridGen, FalseExample125) {
    constexpr int ClauseNum = 125;
    constexpr int VarsNum = 25;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {-3, -8, -1},    {-14, 3, -11},   {19, -21, 3},    {10, -22, 4},
        {-11, -3, -18},  {-12, 14, 7},    {-15, -13, 5},   {12, -13, -17},
        {-22, 14, -6},   {-16, -5, 25},   {-4, -6, -24},   {15, 25, -4},
        {-4, 4, 10},     {-1, 19, 21},    {20, 14, 23},    {14, 1, -8},
        {-4, 16, 13},    {-14, -15, 2},   {25, -20, -19},  {19, -5, 11},
        {20, 16, 12},    {-2, -6, -21},   {2, -4, 6},      {4, -18, -7},
        {-4, 6, -16},    {12, 18, 12},    {3, 24, 19},     {5, -10, -17},
        {-6, 24, 7},     {-2, -20, 15},   {7, -12, -9},    {-14, -3, -12},
        {-23, 10, 8},    {-15, 22, -23},  {21, -6, -6},    {20, 13, 10},
        {-12, -8, -17},  {17, -19, 10},   {-15, 16, 2},    {-14, 22, -21},
        {-7, -14, 21},   {-22, 24, 15},   {1, -17, 22},    {22, 5, -16},
        {-16, 1, -18},   {-11, -13, -14}, {-17, 25, 20},   {16, -2, 3},
        {-6, 9, -23},    {1, -19, 16},    {15, 19, -25},   {23, 6, 1},
        {-10, 12, 25},   {17, -11, 21},   {2, 18, 21},     {-6, -16, 7},
        {20, 6, -20},    {22, 4, 10},     {10, -4, 14},    {-11, 13, -24},
        {-4, 8, 1},      {9, 3, -15},     {5, 19, -4},     {2, 17, 23},
        {-3, 23, 9},     {-25, 20, 5},    {-16, -4, 7},    {-6, 13, 24},
        {3, -25, 4},     {25, 16, 22},    {20, -16, 6},    {20, 21, 25},
        {22, -22, 10},   {-19, -24, -11}, {18, -24, 6},    {-3, -8, 8},
        {6, -12, 19},    {-25, -25, 2},   {-18, -11, -3},  {7, 18, 17},
        {-13, -17, -11}, {-25, 5, -16},   {17, -15, -21},  {20, 22, -18},
        {-3, 8, -25},    {-1, 11, 11},    {14, 7, 5},      {-19, 13, -20},
        {18, 20, 9},     {1, 5, -14},     {13, 22, -4},    {-20, 13, 24},
        {-19, 16, -18},  {-25, -17, -24}, {-8, 24, -9},    {-2, 4, -2},
        {24, 2, 18},     {15, -17, -10},  {-21, -1, -13},  {-14, -15, -2},
        {17, 17, 9},     {-22, 12, 21},   {18, -22, 17},   {3, 9, -10},
        {-18, 20, -12},  {20, -17, 8},    {-18, 16, -18},  {11, -3, 18},
        {-1, 15, 22},    {-21, 6, 18},    {-11, -10, -22}, {7, 11, 9},
        {-16, 11, 16},   {-15, 25, 5},    {-1, -7, 19},    {-11, -7, -7},
        {5, 24, -12},    {-19, 17, 6},    {-19, 9, -4},    {19, 13, -16},
        {25, -20, -14},  {-12, -9, 7},    {-17, -11, -16}, {-6, 7, 12},
        {-23, 17, 23},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();
    EXPECT_FALSE(res.has_value());
}

TEST(HybridGen, TrueExample150) {
    constexpr int ClauseNum = 150;
    constexpr int VarsNum = 27;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {-26, 21, -25},  {19, 26, -15},   {-12, 4, 3},     {-10, 9, 24},
        {-12, -16, 13},  {-27, -4, -7},   {21, 26, -16},   {16, 20, 14},
        {26, -2, 14},    {-6, 27, 4},     {-10, 3, -10},   {21, 18, 3},
        {-26, -14, -12}, {-10, -17, 11},  {-21, 21, 21},   {-13, 21, -5},
        {-5, -8, 10},    {14, -22, 22},   {-3, 26, 6},     {10, -7, -21},
        {-20, 21, 11},   {-2, -13, -25},  {-17, 18, 26},   {27, -14, -3},
        {6, 9, -18},     {-10, -16, 10},  {-19, -11, 22},  {14, 5, -17},
        {-5, -26, 23},   {27, 17, 6},     {-20, -27, -1},  {-6, -2, 17},
        {-15, -9, 9},    {21, 9, 24},     {-22, -25, -8},  {12, -1, 24},
        {-21, 27, -26},  {-23, -11, -26}, {22, 9, 7},      {-19, -2, 13},
        {14, -17, -8},   {-11, -27, 25},  {-2, 9, -12},    {3, -9, -26},
        {-24, 6, 10},    {-11, -21, -16}, {17, 24, -22},   {-17, 24, -19},
        {4, -20, 14},    {25, 17, 9},     {16, 1, -27},    {19, 26, -3},
        {-7, 19, -19},   {8, 21, -14},    {7, 1, -14},     {17, -8, -11},
        {15, -17, 18},   {23, -21, -23},  {5, -13, 12},    {-19, 22, 9},
        {16, 4, 18},     {12, 9, -11},    {10, -27, 14},   {-14, 2, 11},
        {-10, 6, -3},    {-8, 20, -27},   {2, -19, -26},   {-7, -17, -1},
        {9, -18, 14},    {25, -21, -11},  {14, -27, -2},   {7, -5, -14},
        {5, -7, 24},     {-27, -13, -7},  {12, 26, 22},    {-4, -22, 20},
        {-10, -23, -3},  {20, 14, 7},     {10, -13, -25},  {-4, 18, -8},
        {18, -2, 2},     {-16, -4, 8},    {6, -14, 23},    {-20, -20, 4},
        {11, -12, 24},   {-25, -12, -10}, {1, -24, -13},   {-2, -25, 12},
        {26, 24, 3},     {-8, -25, -3},   {-7, -9, -17},   {11, 5, 11},
        {-16, -9, -4},   {-18, 27, 23},   {-16, 21, 5},    {-17, 15, 22},
        {-1, -20, 24},   {19, 6, 20},     {-23, 12, 12},   {15, 9, 5},
        {-9, 27, 25},    {-12, -1, -18},  {-10, 20, 9},    {2, -20, 3},
        {14, 3, -11},    {3, 20, 15},     {3, -10, 25},    {5, -24, 18},
        {20, -15, 16},   {5, 26, -12},    {23, 21, -2},    {-8, -20, -8},
        {-8, -25, -5},   {2, -19, 4},     {10, -22, -11},  {3, 20, -11},
        {-8, -24, -19},  {-4, -15, -21},  {-3, -5, 27},    {8, -13, -8},
        {9, -12, 8},     {-6, 1, 23},     {22, -22, 20},   {7, 1, -21},
        {-25, 14, 2},    {1, 22, 10},     {-8, -14, 8},    {-22, -13, -17},
        {-20, -6, -14},  {22, -9, 10},    {-2, -25, -12},  {-3, -25, -19},
        {-9, -5, 8},     {-27, -23, -4},  {-26, -12, -14}, {24, 21, 23},
        {-25, 13, -7},   {-6, -17, -17},  {-2, 9, 18},     {-18, -26, -20},
        {-12, -14, -14}, {8, 25, 19},     {-5, -9, 11},    {-4, 4, 7},
        {8, -4, 7},      {20, 14, -25},   {26, -15, 10},   {23, -9, -19},
        {-10, -7, -6},   {-10, -20, -27},
    }};
    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();
    EXPECT_TRUE(res.has_value());
}

TEST(HybridGen, FalseExample160_5) {
    constexpr int ClauseNum = 160;
    constexpr int VarsNum = 5;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {1, -5, -1},  {-5, -2, -4}, {-3, 3, 5},   {-2, -5, 3},  {-4, 2, 1},
        {-3, -5, 1},  {3, -5, -3},  {3, -4, -4},  {2, 3, -4},   {2, 2, -3},
        {3, 1, 2},    {-3, -4, 4},  {-1, 2, -4},  {5, 4, 3},    {-2, -2, 4},
        {-1, -5, -2}, {-2, 5, 3},   {4, -1, 3},   {1, 2, -5},   {2, 1, -3},
        {3, 3, 3},    {-4, 5, -4},  {-3, -3, -4}, {-4, 4, -5},  {-2, 1, 5},
        {-3, -4, -4}, {2, 3, -4},   {-3, -1, 1},  {-5, 4, 3},   {5, -2, -5},
        {4, -4, -3},  {5, -2, -3},  {-4, 4, -4},  {1, -1, 3},   {5, 2, 3},
        {4, 4, 2},    {2, -4, -5},  {-2, -4, 2},  {-5, 3, -4},  {2, 5, 5},
        {5, 1, -4},   {-4, -2, -1}, {-1, 3, 1},   {5, 4, -3},   {-1, 3, 3},
        {1, 3, -3},   {4, -4, -2},  {-5, -2, -2}, {2, 3, -5},   {-5, 4, 2},
        {5, 5, 5},    {1, -3, 3},   {1, 2, 4},    {5, 5, 1},    {1, -5, 1},
        {-5, -1, 1},  {-1, -3, -2}, {1, 3, 4},    {5, -1, -2},  {-1, -2, -1},
        {-3, 1, -2},  {3, -3, -5},  {-3, 5, -5},  {-2, 1, 3},   {-3, 1, -3},
        {1, 2, 2},    {3, 4, 3},    {-2, 5, -3},  {1, -4, 3},   {4, 1, -4},
        {5, 5, -2},   {5, 5, -2},   {-2, 5, -1},  {-5, -3, 1},  {1, 1, 2},
        {-3, 3, -5},  {-3, -2, 4},  {-5, -5, 3},  {5, -5, -2},  {5, 1, 5},
        {3, 2, -5},   {-2, 1, 1},   {-2, -3, 3},  {-2, -4, -3}, {5, -3, -2},
        {4, 1, 3},    {1, -2, 1},   {-2, 4, 2},   {-4, 2, -5},  {-2, 3, 4},
        {-3, -5, 1},  {-3, 1, 2},   {-2, 5, 4},   {-3, 5, -3},  {1, 3, 2},
        {-4, 5, -5},  {-1, -5, 5},  {3, 4, -5},   {2, -4, 5},   {-2, 2, 4},
        {-5, -2, -2}, {5, -3, -5},  {1, 3, -4},   {-1, -1, 4},  {-2, 3, -5},
        {-2, 2, 4},   {-4, 1, -2},  {5, -3, -2},  {2, -2, -5},  {2, -4, 2},
        {-5, 5, -4},  {2, -3, 2},   {-5, -3, 2},  {2, -3, -4},  {-5, -1, 3},
        {3, 4, 3},    {1, -3, -2},  {-4, 2, 5},   {5, -5, -2},  {-4, 3, -3},
        {-5, -5, 2},  {1, -4, 2},   {-4, -5, 1},  {-1, 4, -3},  {-5, -5, -3},
        {4, 4, -5},   {-5, 1, -5},  {-4, -3, -3}, {2, 5, -1},   {2, 4, 3},
        {-5, -1, -3}, {3, 4, -5},   {-4, -4, -5}, {-1, 5, -4},  {-2, 1, -3},
        {-2, -2, 5},  {-2, 1, -2},  {-3, -1, 5},  {3, -1, -5},  {5, 4, 4},
        {1, -3, -3},  {-5, -3, 2},  {1, 1, 3},    {-4, -5, 1},  {-4, 2, -4},
        {4, -4, -3},  {-3, 5, -3},  {-1, 2, 4},   {2, 3, 1},    {-3, 3, -4},
        {-1, -3, -1}, {5, 4, -2},   {2, 5, 2},    {1, 5, 4},    {4, -4, 4},
        {-2, 5, -4},  {-1, 2, -3},  {-3, 1, -3},  {-5, 1, 5},   {2, 5, 1},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_FALSE(res.has_value());
}

TEST(HybridGen, TrueExample160_33) {
    constexpr int ClauseNum = 160;
    constexpr int VarsNum = 33;

    constexpr std::array<sat::Clause, ClauseNum> clauses = {{
        {-20, 6, 8},     {-15, 25, -16},  {-9, -31, 3},   {-4, 5, 33},
        {-5, -3, -19},   {-22, 21, 16},   {-1, 12, 18},   {-33, 28, -19},
        {-7, -8, 4},     {21, -28, -10},  {6, -33, -2},   {15, -25, 2},
        {-31, 11, -3},   {-15, 13, 3},    {24, 14, 31},   {23, 10, 27},
        {-8, -5, -11},   {-22, 25, 33},   {-21, -10, 5},  {12, -13, 12},
        {-21, 14, -4},   {-21, 25, 15},   {32, 32, 24},   {16, 10, 5},
        {18, -23, 15},   {-32, -33, -16}, {-6, -32, 23},  {30, -8, 5},
        {26, 31, 22},    {28, -9, 12},    {13, 16, -9},   {-20, -4, 20},
        {-22, -5, 27},   {21, 29, -7},    {25, 11, -15},  {28, -18, 17},
        {23, 27, -13},   {-29, 10, 18},   {21, -1, 9},    {-4, 4, 5},
        {8, 18, 17},     {13, 10, 15},    {8, 19, -22},   {-12, -26, 7},
        {-28, -9, 31},   {-10, 33, 22},   {-30, 7, 14},   {-21, -13, 13},
        {-14, 12, 15},   {-1, 2, -19},    {-30, 4, -21},  {-4, -13, -30},
        {-2, -31, -1},   {-19, -11, 7},   {-32, -30, 11}, {-11, -8, -10},
        {27, -33, 22},   {-14, -27, -26}, {-30, 20, -32}, {-7, -22, -29},
        {19, -31, 17},   {17, 16, 8},     {-1, -3, 18},   {-22, -25, -3},
        {-15, -4, -23},  {-26, 9, 13},    {-33, 17, -9},  {-10, -5, -2},
        {-17, 12, -5},   {-22, 20, -1},   {-15, 11, 14},  {-19, 25, 6},
        {10, 5, -31},    {-26, -2, 29},   {24, -4, -15},  {-2, 13, -22},
        {-21, 14, -8},   {23, -18, -4},   {-11, -2, -5},  {-20, -6, -28},
        {-10, 10, 17},   {-25, -17, 9},   {2, 5, -4},     {27, -18, 14},
        {-17, -13, -14}, {-10, -25, 5},   {-11, 9, 5},    {-23, 9, 5},
        {-5, -8, -11},   {3, 15, 29},     {-21, -3, -24}, {-10, -7, 1},
        {-8, 3, -16},    {-23, -20, -24}, {-13, 33, 5},   {-14, -17, 5},
        {-28, -22, 30},  {-29, 29, 1},    {5, 13, -21},   {-33, 26, 7},
        {-1, 9, 13},     {-5, 14, 1},     {-7, -10, 20},  {-19, -31, 24},
        {4, 9, 7},       {-13, -3, 8},    {-21, -14, 16}, {11, 11, -14},
        {32, 32, 20},    {12, 12, 27},    {-33, 1, 31},   {21, -8, -12},
        {-28, 5, -30},   {1, -2, 30},     {-20, 21, 25},  {-9, 1, 12},
        {8, 4, 33},      {-8, 5, 8},      {-13, -24, 13}, {6, -30, -32},
        {-25, -26, 16},  {-29, 19, 14},   {-21, 26, 20},  {-5, 10, 6},
        {-26, 11, -17},  {12, -14, -25},  {15, -28, 16},  {26, -14, 23},
        {16, -9, -18},   {13, 20, -26},   {15, 30, -8},   {-27, -9, -25},
        {21, -29, -8},   {-13, 24, 28},   {-21, 14, -26}, {-13, 6, 20},
        {12, 10, 32},    {10, -3, -31},   {3, 20, 12},    {23, 23, -31},
        {11, 30, -2},    {-21, -31, -22}, {31, -6, 5},    {25, 14, 28},
        {-13, -8, 26},   {24, -19, -18},  {-26, -14, 16}, {10, 4, 23},
        {-18, 3, 24},    {31, 7, -8},     {27, -23, 5},   {29, -29, 2},
        {26, -4, 16},    {-17, 7, 33},    {-21, 27, -17}, {-2, -6, 27},
        {11, -4, 12},    {-9, -25, -6},   {14, 4, 3},     {-1, 16, 31},
    }};

    sat::SAT<ClauseNum, VarsNum> sat{clauses};
    const auto res = sat.try_solve();

    EXPECT_TRUE(res.has_value());
}